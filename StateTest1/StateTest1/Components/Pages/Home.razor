@page "/"

<PageTitle>Home</PageTitle>

<h1>Hello, App State!</h1>

<p>
    This is a .NET 8 Blazor Web App with the Interacive render mode set to WebAssembly, and the interactivity location set to per page/component.
</p>
<p>
    It uses a custom <code>AppStateProviderBase</code> component to provide a state bag to the page/component tree. This AppStateProviderBase can be inherited from to create a custom state bag.
</p>
<p>
    What makes it unique is that it overcomes the issue of stateful scoped services constantly being created and destroyed, which happens when you use the per page/component interactivity location option.
</p>
<p>
    It employs a custom server-side State service provider, which uses gRPC to communicate with the client-side AppStateProviderBase component. This allows the AppStateProviderBase component to maintain state on the server, and to provide that state to the page/component tree.
</p>
<p>
    It also allows the developer to focus on their application, and not on the plumbing required to make it work.
</p>
<p>
    To understand how it works, start with the <code>MyStateBag.razor</code> component, and then look at the <code>AppStateProviderBase</code> class. To see it in action, look at the <code>Counter</code> page, and finally look at the <code>Toolbar</code> component.
</p>